# -*- coding: utf-8 -*-
"""Simulacion_colas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oNBrDTVy9u6HGjmsJQv5JxPRzvRB7c18

**Cola con un servidor**
"""

#Cola Markoviana

import numpy as np
import pandas as pd

def exponencial(lamda):
    return -lamda * np.log(1 - np.random.rand())

# Cola
def simular_cola(nclientes):
    Tllegada = [0] * (nclientes + 1)
    Tespera = [0] * (nclientes + 1)
    Tservicio = [0] * (nclientes + 1)
    Tocio = [0] * (nclientes + 1)
    Tsalida = [0] * (nclientes + 1)
    ClientesEnCola = [0] * (nclientes + 1)
    ClientesEnSistema = [0] * (nclientes + 1)

    # Parámetros de las distribuciones
    k = 0.75  # Tasa de llegadas
    l = 1     # Tasa de servicio


    cliente = 1
    Tllegada[1] = exponencial(1/k)
    Tservicio[1] = exponencial(1/l)
    Tespera[1] = 0
    Tocio[1] = 0
    Tsalida[1] = Tllegada[1] + Tespera[1] + Tservicio[1]

    cliente += 1

    resultados = []

    ClientesEnSistema[1] = 1
    ClientesEnCola[1] = 0
    resultados.append([1, Tllegada[1], Tespera[1], Tservicio[1], Tocio[1], Tsalida[1], ClientesEnCola[1], ClientesEnSistema[1]])

    # Cálculo para cada cliente
    while cliente <= nclientes:
        Tllegada[cliente] = Tllegada[cliente - 1] + exponencial(1/k)
        Tespera[cliente] = max(Tsalida[cliente - 1], Tllegada[cliente]) - Tllegada[cliente]
        Tservicio[cliente] = exponencial(1/l)
        Tocio[cliente] = max(Tsalida[cliente - 1], Tllegada[cliente]) - Tsalida[cliente - 1]
        Tsalida[cliente] = Tllegada[cliente] + Tespera[cliente] + Tservicio[cliente]


        en_cola = 0
        for j in range(1, cliente):
            if Tllegada[j] <= Tllegada[cliente] < Tsalida[j]:
                en_cola += 1

        ClientesEnCola[cliente] = max(0, en_cola - 1)
        if Tespera[cliente] == 0 and Tservicio[cliente] == 0:
            ClientesEnSistema[cliente] = 0
        else:
            ClientesEnSistema[cliente] = ClientesEnCola[cliente] + 1

        resultados.append([cliente, Tllegada[cliente], Tespera[cliente], Tservicio[cliente], Tocio[cliente], Tsalida[cliente], ClientesEnCola[cliente], ClientesEnSistema[cliente]])
        cliente += 1

    df = pd.DataFrame(resultados, columns=["Cliente", "Tllegada", "Tespera", "Tservicio", "Tocio", "Tsalida", "Clientes en Cola", "Clientes en Sistema"])


    print(df)

    # Métricas
    print("\n--- Métricas ---")
    print(f"Tiempo total de simulación: {Tsalida[nclientes]:.2f}")
    print(f"Tiempo total de ocio: {sum(Tocio):.2f} ({sum(Tocio)/Tsalida[nclientes]:.2%})")
    print(f"Tiempo promedio en cola: {np.mean(Tespera):.2f}")
    print(f"Tiempo promedio en sistema: {(np.mean(Tespera) + np.mean(Tservicio)):.2f}")
    print(f"Promedio de entidades en cola: {np.mean(ClientesEnCola):.2f}")
    print(f"Promedio de entidades en sistema: {np.mean(ClientesEnSistema):.2f}")
    print(f"Máximo de entidades en sistema: {max(ClientesEnSistema):.2f}")

    return df

nclientes = int(input("Número de iteraciones a realizar: "))

# Ejecutar simulación
df_resultado = simular_cola(nclientes)
print (df_resultado)

import matplotlib.pyplot as plt

# Tiempo en cola
promedio_espera = [np.mean(df_resultado["Tespera"][:i]) for i in range(1, nclientes + 1)]
plt.figure(figsize=(10, 5))
plt.plot(range(1, nclientes + 1), promedio_espera, color='indigo')
plt.xlabel("Paso", fontsize=12)
plt.ylabel("Tiempo promedio de espera en cola (min)", fontsize=12)
plt.title("Tiempo en cola", fontsize=16)
plt.show()

# Entidades en cola
plt.figure(figsize=(10, 5))
plt.plot(range(1, nclientes + 1), df_resultado["Clientes en Cola"], color='indigo')
plt.xlabel("Paso", fontsize=12)
plt.ylabel("Promedio de clientes en cola",  fontsize=12)
plt.title("Clientes en cola", fontsize=14)
plt.show()

# Cola con tiempos de servicio normales

import numpy as np
import pandas as pd

def exponencial(lamda):
    return -lamda * np.log(1 - np.random.rand())

def normal(mu, sigma):
    suma = sum(np.random.rand(12))
    if (mu + sigma * (suma - 6))<0:
        return 0
    else:
        return mu + sigma * (suma - 6)

# Cola
def simular_cola(nclientes):
    Tllegada = [0] * (nclientes + 1)
    Tespera = [0] * (nclientes + 1)
    Tservicio = [0] * (nclientes + 1)
    Tocio = [0] * (nclientes + 1)
    Tsalida = [0] * (nclientes + 1)
    ClientesEnCola = [0] * (nclientes + 1)
    ClientesEnSistema = [0] * (nclientes + 1)

    # Parámetros de las distribuciones
    k = 0.35  # Llegadas exponenciales
    l = mu, sigma= 2, 1.2     # Servicio normal

    cliente = 1
    Tllegada[1] = exponencial(1/k)
    Tservicio[1] = normal(mu, sigma)
    Tespera[1] = 0
    Tocio[1] = 0
    Tsalida[1] = Tllegada[1] + Tespera[1] + Tservicio[1]

    cliente += 1

    resultados = []

    ClientesEnSistema[1] = 1
    ClientesEnCola[1] = 0
    resultados.append([1, Tllegada[1], Tespera[1], Tservicio[1], Tocio[1], Tsalida[1], ClientesEnCola[1], ClientesEnSistema[1]])

    # Cálculo para cada cliente
    while cliente <= nclientes:
        Tllegada[cliente] = Tllegada[cliente - 1] + exponencial(1/k)
        Tespera[cliente] = max(Tsalida[cliente - 1], Tllegada[cliente]) - Tllegada[cliente]
        Tservicio[cliente] = normal(mu,sigma)
        Tocio[cliente] = max(Tsalida[cliente - 1], Tllegada[cliente]) - Tsalida[cliente - 1]
        Tsalida[cliente] = Tllegada[cliente] + Tespera[cliente] + Tservicio[cliente]


        en_cola = 0
        for j in range(1, cliente):
            if Tllegada[j] <= Tllegada[cliente] < Tsalida[j]:
                en_cola += 1

        ClientesEnCola[cliente] = max(0, en_cola - 1)
        if Tespera[cliente] == 0 and Tservicio[cliente] == 0:
            ClientesEnSistema[cliente] = 0
        else:
            ClientesEnSistema[cliente] = ClientesEnCola[cliente] + 1

        resultados.append([cliente, Tllegada[cliente], Tespera[cliente], Tservicio[cliente], Tocio[cliente], Tsalida[cliente], ClientesEnCola[cliente], ClientesEnSistema[cliente]])
        cliente += 1


    df = pd.DataFrame(resultados, columns=["Cliente", "Tllegada", "Tespera", "Tservicio", "Tocio", "Tsalida", "Clientes en Cola", "Clientes en Sistema"])


    print(df)

    # Métricas
    print("\n--- Métricas ---")
    print(f"Tiempo total de simulación: {Tsalida[nclientes]:.2f}")
    print(f"Tiempo total de ocio: {sum(Tocio):.2f} ({sum(Tocio)/Tsalida[nclientes]:.2%})")
    print(f"Tiempo promedio en cola: {np.mean(Tespera):.2f}")
    print(f"Tiempo promedio en sistema: {(np.mean(Tespera) + np.mean(Tservicio)):.2f}")
    print(f"Promedio de entidades en cola: {np.mean(ClientesEnCola):.2f}")
    print(f"Promedio de entidades en sistema: {np.mean(ClientesEnSistema):.2f}")
    print(f"Máximo de entidades en sistema: {max(ClientesEnSistema):.2f}")

    return df

nclientes = int(input("Número de iteraciones a realizar: "))

df_resultado = simular_cola(nclientes)
print (df_resultado)

import matplotlib.pyplot as plt

# Tiempo en cola
promedio_espera = [np.mean(df_resultado["Tespera"][:i]) for i in range(1, nclientes + 1)]
plt.figure(figsize=(10, 5))
plt.plot(range(1, nclientes + 1), promedio_espera, color='indigo')
plt.xlabel("Paso", fontsize=12)
plt.ylabel("Tiempo promedio de espera en cola (min)", fontsize=12)
plt.title("Tiempo en cola", fontsize=16)
plt.show()

# Entidades en cola
plt.figure(figsize=(10, 5))
plt.plot(range(1, nclientes + 1), df_resultado["Clientes en Cola"], color='indigo')
plt.xlabel("Paso", fontsize=12)
plt.ylabel("Promedio de entidades en cola",  fontsize=12)
plt.title("Entidades en cola", fontsize=14)
plt.show()

import matplotlib.pyplot as plt

# Probabilidad de n clientes en sistema
valores_n = list(range(0, 11))
frecuencias = [sum(df_resultado["Clientes en Sistema"] == n) for n in valores_n]
probabilidades = [f / nclientes for f in frecuencias]

# Graficar
plt.figure(figsize=(8,5))
plt.bar(valores_n, probabilidades, edgecolor='black',color='indigo')
plt.xlabel('Clientes en el sistema', fontsize=12)
plt.ylabel('Probabilidad', fontsize=12)
plt.title('Distribución del número de clientes en sistema', fontsize=16)
plt.xticks(valores_n)
plt.show()

"""**Cola con varios servidores**"""

import pandas as pd, seaborn as sns, numpy as np, matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
np.random.seed(42)

# Parámetros del sistema
lambda_llegadas = 1
mu_servicio = 1.5
num_clientes = 10000
servidores_activos = 1
uso_servidores = {}
tiempos_servicio = []

# Simulación de 1 a 5 servidores
while servidores_activos <= 5:
    if servidores_activos == 1:
        tiempos_entre_llegadas = list(np.random.exponential(scale=1 / lambda_llegadas, size=num_clientes))

    tiempos_llegada = [0] * num_clientes
    tiempos_salida = [0] * num_clientes

    tiempos_llegada[0] = round(tiempos_entre_llegadas[0], 4)

    for i in range(1, num_clientes):
        tiempos_llegada[i] = round((tiempos_llegada[i - 1] + tiempos_entre_llegadas[i]), 4)

    if servidores_activos == 1:
        tiempos_servicio = list(np.random.exponential(scale=1 / mu_servicio, size=num_clientes))

    tiempos_salida[0] = round((tiempos_llegada[0] + tiempos_servicio[0]), 4)
    for i in range(1, num_clientes):
        prev_salidas = tiempos_salida[:i]
        prev_salidas.sort(reverse=True)
        servidores_ocupados = prev_salidas[:servidores_activos]
        if i < servidores_activos:
            tiempos_salida[i] = round(tiempos_llegada[i] + tiempos_servicio[i], 4)
        else:
            tiempos_salida[i] = round(max(tiempos_llegada[i], min(servidores_ocupados)) + tiempos_servicio[i], 4)

    tiempos_totales = [abs(round((tiempos_salida[i] - tiempos_llegada[i]), 4)) for i in range(num_clientes)]
    tiempos_espera = [abs(round((tiempos_totales[i] - tiempos_servicio[i]), 4)) for i in range(num_clientes)]

    datos = pd.DataFrame(list(zip(tiempos_llegada, tiempos_salida, tiempos_servicio, tiempos_totales, tiempos_espera, tiempos_entre_llegadas)),
                         columns=['llegada', 'salida', 'servicio', 'total', 'espera', 'entre_llegadas'])

    evento_tiempo = [0]
    eventos = ['inicio simulacion']
    for i in range(0, num_clientes):
        evento_tiempo.append(datos['llegada'][i])
        evento_tiempo.append(datos['salida'][i])
        eventos.append('cliente ' + str(i + 1) + ' llego')
        eventos.append('cliente ' + str(i + 1) + ' salio')

    linea_tiempo = pd.DataFrame(list(zip(evento_tiempo, eventos)),
                                columns=['tiempo', 'evento']).sort_values(by='tiempo').reset_index(drop=True)

    linea_tiempo['n'] = 0
    clientes_sistema = 0
    for i in range(1, (2 * num_clientes) - 1):
        evento = linea_tiempo['evento'][i]
        if 'llego' in evento:
            clientes_sistema += 1
        elif 'salio' in evento:
            clientes_sistema -= 1
            clientes_sistema = max(0, clientes_sistema)
        linea_tiempo['n'][i] = clientes_sistema

    tbe = []
    for i in range(len(linea_tiempo) - 1):
        tbe.append(round(linea_tiempo.tiempo[i + 1] - linea_tiempo.tiempo[i], 4))
    tbe.append(0)
    linea_tiempo['tbe'] = tbe

    Pn = linea_tiempo.groupby('n').tbe.agg(sum) / sum(tbe)
    Ls = sum(Pn * Pn.index)
    Lq = sum((Pn.index[servidores_activos:] - servidores_activos) * (Pn[servidores_activos:]))


    plt.figure(figsize=(12, 4))
    sns.lineplot(x=datos.index, y=tiempos_espera, color='indigo').set(xticklabels=[])
    plt.xlabel('Cliente')
    plt.ylabel('Minutos')
    plt.title('Tiempo de espera con ' + str(servidores_activos) + ' servidores')
    sns.despine()
    plt.show()

    if servidores_activos == 1:
        plt.figure(figsize=(7, 7))
        sns.histplot(tiempos_entre_llegadas, kde=False, color='indigo')
        plt.title('Intervalos entre llegadas')
        plt.xlabel('Minutos')
        plt.ylabel('Frecuencia')
        sns.despine()
        plt.show()

        plt.figure(figsize=(8, 8))
        sns.histplot(tiempos_servicio, kde=False, color='indigo')
        plt.title('Tiempos de servicio')
        plt.xlabel('Minutos')
        plt.ylabel('Frecuencia')
        sns.despine()
        plt.show()

    plt.figure(figsize=(8, 8))
    sns.barplot(x=Pn.index, y=Pn.values, color='indigo')
    plt.title('Probabilidad de n clientes con ' + str(servidores_activos) + ' servidores')
    plt.xlabel('Número de clientes en sistema')
    plt.ylabel('Probabilidad')
    sns.despine()
    plt.show()

    uso_servidores.setdefault(servidores_activos, (Ls - Lq) / servidores_activos)

    print('--- Resultados ---\n',
          'Servidores: ', servidores_activos, '\n',
          'Tiempo entre llegadas promedio: ', datos['entre_llegadas'].mean(), '\n',
          'Tiempo de servicio promedio: ', datos['servicio'].mean(), '\n',
          'Utilización: ', (Ls - Lq) / servidores_activos, '\n',
          'Promedio espera en cola (Wq): ', datos['espera'].mean(), '\n',
          'Promedio total en sistema (Ws): ', datos['total'].mean(), '\n',
          'Clientes promedio en cola (Lq): ', Lq, '\n',
          'Clientes promedio en sistema (Ls): ', Ls, '\n',
          'Servidores ocupados promedio: ', Ls - Lq, '\n')

    servidores_activos += 1

uso_servidores = pd.Series(uso_servidores)
plt.figure(figsize=(6, 6))
sns.pointplot(x=uso_servidores.index, y=uso_servidores.values, color='indigo')
plt.xlabel('Cantidad de servidores')
plt.ylabel('Utilización')
plt.title('Servidores vs Utilización')
plt.show()

import pandas as pd, seaborn as sns, numpy as np, matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')
np.random.seed(42)

lambda_llegadas = 1
mu_servicio = 1.5
num_clientes = 10000
servidores_activos = 1
uso_servidores = {}
tiempos_servicio = []

# Lista para recopilar resultados
resultados_comparativos = []

while servidores_activos <= 5:
    if servidores_activos == 1:
        tiempos_entre_llegadas = list(np.random.exponential(scale=1 / lambda_llegadas, size=num_clientes))

    tiempos_llegada = [0] * num_clientes
    tiempos_salida = [0] * num_clientes
    tiempos_llegada[0] = round(tiempos_entre_llegadas[0], 4)

    for i in range(1, num_clientes):
        tiempos_llegada[i] = round((tiempos_llegada[i - 1] + tiempos_entre_llegadas[i]), 4)

    if servidores_activos == 1:
        tiempos_servicio = list(np.random.exponential(scale=1 / mu_servicio, size=num_clientes))

    tiempos_salida[0] = round((tiempos_llegada[0] + tiempos_servicio[0]), 4)
    for i in range(1, num_clientes):
        prev_salidas = tiempos_salida[:i]
        prev_salidas.sort(reverse=True)
        servidores_ocupados = prev_salidas[:servidores_activos]
        if i < servidores_activos:
            tiempos_salida[i] = round(tiempos_llegada[i] + tiempos_servicio[i], 4)
        else:
            tiempos_salida[i] = round(max(tiempos_llegada[i], min(servidores_ocupados)) + tiempos_servicio[i], 4)

    tiempos_totales = [abs(round((tiempos_salida[i] - tiempos_llegada[i]), 4)) for i in range(num_clientes)]
    tiempos_espera = [abs(round((tiempos_totales[i] - tiempos_servicio[i]), 4)) for i in range(num_clientes)]

    datos = pd.DataFrame(list(zip(tiempos_llegada, tiempos_salida, tiempos_servicio, tiempos_totales, tiempos_espera, tiempos_entre_llegadas)),
                         columns=['llegada', 'salida', 'servicio', 'total', 'espera', 'entre_llegadas'])

    evento_tiempo = [0]
    eventos = ['inicio simulacion']
    for i in range(0, num_clientes):
        evento_tiempo.append(datos['llegada'][i])
        evento_tiempo.append(datos['salida'][i])
        eventos.append('cliente ' + str(i + 1) + ' llego')
        eventos.append('cliente ' + str(i + 1) + ' salio')

    linea_tiempo = pd.DataFrame(list(zip(evento_tiempo, eventos)),
                                columns=['tiempo', 'evento']).sort_values(by='tiempo').reset_index(drop=True)

    linea_tiempo['n'] = 0
    clientes_sistema = 0
    for i in range(1, (2 * num_clientes) - 1):
        evento = linea_tiempo['evento'][i]
        if 'llego' in evento:
            clientes_sistema += 1
        elif 'salio' in evento:
            clientes_sistema -= 1
            clientes_sistema = max(0, clientes_sistema)
        linea_tiempo['n'][i] = clientes_sistema

    tbe = []
    for i in range(len(linea_tiempo) - 1):
        tbe.append(round(linea_tiempo.tiempo[i + 1] - linea_tiempo.tiempo[i], 4))
    tbe.append(0)
    linea_tiempo['tbe'] = tbe

    Pn = linea_tiempo.groupby('n').tbe.agg(sum) / sum(tbe)
    Ls = sum(Pn * Pn.index)
    Lq = sum((Pn.index[servidores_activos:] - servidores_activos) * (Pn[servidores_activos:]))

    uso_servidores.setdefault(servidores_activos, (Ls - Lq) / servidores_activos)

    resultados_comparativos.append({
        'Servidores': servidores_activos,
        'Wq (Tiempo promedio en cola)': datos['espera'].mean(),
        'Ws (Tiempo promedio en sistema)': datos['total'].mean(),
        'Lq (Clientes promedio en cola)': Lq,
        'Ls (Clientes promedio en sistema)': Ls,
        'Utilización': (Ls - Lq) / servidores_activos
    })

    servidores_activos += 1

df_comparativo = pd.DataFrame(resultados_comparativos)
print(df_comparativo)

#Comparativo entre servidores
import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(12, 6))


sns.lineplot(data=df_comparativo, x='Servidores', y='Wq (Tiempo promedio en cola)', marker="o", label="Tiempo promedio en cola (min)", color=sns.color_palette("Blues", 4)[2])
sns.lineplot(data=df_comparativo, x='Servidores', y='Ws (Tiempo promedio en sistema)', marker="o", label="Tiempo promedio sistema (min)", color=sns.color_palette("Purples", 4)[2])
sns.lineplot(data=df_comparativo, x='Servidores', y='Lq (Clientes promedio en cola)', marker="o", label="Longitud promedio cola", color=sns.color_palette("Blues", 4)[3])
sns.lineplot(data=df_comparativo, x='Servidores', y='Ls (Clientes promedio en sistema)', marker="o", label="Promedio clientes en sistema", color=sns.color_palette("Purples", 4)[3])
sns.lineplot(data=df_comparativo, x='Servidores', y='Utilización', marker="o", label="Utilización", color=sns.color_palette("Blues", 4)[1])

plt.xlabel('Número de Servidores', fontsize=12)
plt.ylabel('Métricas', fontsize=12)
plt.title('Métricas de desempeño', fontsize=16)
plt.legend()
plt.tight_layout()
plt.xticks(df_comparativo['Servidores'].astype(int))
plt.show()